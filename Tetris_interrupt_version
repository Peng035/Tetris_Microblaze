/*
 *
 * Xilinx, Inc.
 * XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" AS A
 * COURTESY TO YOU.  BY PROVIDING THIS DESIGN, CODE, OR INFORMATION AS
 * ONE POSSIBLE   IMPLEMENTATION OF THIS FEATURE, APPLICATION OR
 * STANDARD, XILINX IS MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION
 * IS FREE FROM ANY CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE
 * FOR OBTAINING ANY RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION
 * XILINX EXPRESSLY DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO
 * THE ADEQUACY OF THE IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO
 * ANY WARRANTIES OR REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE
 * FROM CLAIMS OF INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE.
 */
 /* Micro Tetris, based on an obfuscated tetris, 1989 IOCCC Best Game
 *
 * Copyright (c) 1989  John Tromp <john.tromp@gmail.com>
 * Copyright (c) 2009-2021  Joachim Wiberg <troglobit@gmail.com>
 *
 * Permission to use, copy, modify, and/or distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 * See the following URLs for more information, first John Tromp's page about
 * the game http://homepages.cwi.nl/~tromp/tetris.html then there's the entry
 * page at IOCCC http://www.ioccc.org/1989/tromp.hint
 */


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include "xparameters.h"
#include "xil_cache.h"
#include "xintc.h"
#include "intc_header.h"
#include "xgpio.h"
#include "gpio_header.h"
#include "xtmrctr.h"
#include "tmrctr_header.h"
#include "tmrctr_intr_header.h"
#include "xil_printf.h"
#include "xil_exception.h"

#define DEBUG_C   1     // macro switch for print info

#define clrscr()       
#define gotoxy(x,y)    
#define hidecursor()   
#define showcursor()   
#define bgcolor(c,s)   


/* the board */
#define      B_COLS 12
#define      B_ROWS 23
#define      B_SIZE (B_ROWS * B_COLS)

// offset to convert the 2D position into an 1D integer array
#define TL     -B_COLS-1	/* top left */
#define TC     -B_COLS		/* top center */
#define TR     -B_COLS+1	/* top right */
#define ML     -1		/* middle left */
#define MR     1		/* middle right */
#define BL     B_COLS-1		/* bottom left */
#define BC     B_COLS		/* bottom center */
#define BR     B_COLS+1		/* bottom right */

/* These can be overridden by the user. */
#define DEFAULT_KEYS "jkl pq"
#define KEY_LEFT   0
#define KEY_RIGHT  2
#define KEY_ROTATE 1
#define KEY_DROP   3
#define KEY_PAUSE  4
#define KEY_QUIT   5


// instance of the controllers of peripheral devices
static XIntc intc;
static XGpio Gpio_out;
static XTmrCtr _axi_timer;

// Game logic related 
static volatile int running = 1;
// the freeze flag of the game
// 0: unfreezed, 1: freezed
static int freeze_flag = 0;

static char *keys = DEFAULT_KEYS;
static int level = 1;
static int points = 0;
static int lines_cleared = 0;
static int board[B_SIZE];

static int *peek_shape;		/* peek preview of next shape */
static int  pcolor;
static int *shape;
static int  color;

// the int representation of button press
static int ctrl_key; 

// refresh flag set by the timer interrupt
static int refresh_flag = 1;

// used to generate random next shape
static unsigned long int next_rand = 1;

// 5*19 2D int array , each row represent info of a shape (5 elements) 
// [0] index of shape, [1],[2],[3] block offset
// [4] color of the shape
static int shapes[] = {
	 7, TL, TC, MR, 2,	/* ""__   */
	 8, TR, TC, ML, 3,	/* __""   */
	 9, ML, MR, BC, 1,	/* "|"    */
	 3, TL, TC, ML, 4,	/* square */
	12, ML, BL, MR, 5,	/* |"""   */
	15, ML, BR, MR, 6,	/* """|   */
	18, ML, MR,  2, 7,	/* ---- sticks out */
	 0, TC, ML, BL, 2,	/* /    */
	 1, TC, MR, BR, 3,	/* \    */
	10, TC, MR, BC, 1,	/* |-   */
	11, TC, ML, MR, 1,	/* _|_  */
	 2, TC, ML, BC, 1,	/* -|   */
	13, TC, BC, BR, 5,	/* |_   */
	14, TR, ML, MR, 5,	/* ___| */
	 4, TL, TC, BC, 5,	/* "|   */
	16, TR, TC, BC, 6,	/* |"   */
	17, TL, MR, ML, 6,	/* |___ */
	 5, TC, BC, BL, 6,	/* _| */
	 6, TC, BC,  2 * B_COLS, 7, /* | sticks out */
};

/* Check if shape fits in the current position */
static int fits_in(int *s, int pos)
{
	if (board[pos] || board[pos + s[1]] || board[pos + s[2]] || board[pos + s[3]])
		return 0;

	return 1;
}

// This function need to be modified 
// since the work is shifted to GPU instead
// /* place shape at pos with color */
static void place(int *s, int pos, int c)
{
    // each sprite has 4 blocks
    // pos is the center coordinates
    // s[1] s[2] s[3] are the offset of the other three blocks
    // such TL, BR
	board[pos] = c;
	board[pos + s[1]] = c;
	board[pos + s[2]] = c;
	board[pos + s[3]] = c;

    print("Refresh Once \n");
}


// my function to generate a pseudo random number 
// on bare-metal Microblaze
int my_rand(void) {
    next_rand = next_rand * 1103515245 + 12345;
    return (unsigned int)(next_rand / 65536) % 32768;
}
// my function to create random seed on Microblaze
void my_srand(unsigned int seed) {
    next_rand = seed;
}

// use random value to generate next shape
static int *next_shape(void)
{
    // 7 different shapes, 5 attributes of each shape
	int  pos  = my_rand() % 7 * 5;
	int *next = peek_shape;

	peek_shape = &shapes[pos];
	pcolor = peek_shape[4];

    // recursive call to gaurantee a valid shape chosed
	if (!next){
		return next_shape();
    }

	color = next[4];

	return next;
}

// 
static void freeze(int enable)
{
    // empty loop to freeze the execution
    // the enable signal is toggled
	while (enable)
    {;}
}

// use a switch to generate interrupt to clear 
// the running flag
void exit_handler(void *CallbackRef)
{
	running = 0;
    // clear the interrupt need to implement
    // XIntc_Acknowledge
}

// interrupt handlers of the interrupt IP block
// upper button to freeze/Unfreeze
void IntrButton_U_Handler(void *CallbackRef){
    // toggle the freeze flag
    freeze_flag = !freeze_flag; 
    freeze(freeze_flag);

#ifdef DEBUG_C
	print("Enter Button UP Interrupt Handler\r\n");
    if (freeze_flag) {
        print("Freeze the Game\r\n");
    }
    else{ 
        print("Unfreeze the Game\r\n");
    }
#endif
    ctrl_key = keys[KEY_PAUSE];
	// clear interrupt in Interrupt block
	XIntc_Acknowledge(&intc, XPAR_MICROBLAZE_RISCV_0_AXI_INTC_SYSTEM_BUTTON_U_INTR);
}

// Left 
void IntrButton_L_Handler(void *CallbackRef){

#ifdef DEBUG_C
	print("Enter Button Left Interrupt Handler\r\n");
#endif
    ctrl_key = keys[KEY_LEFT];
	// clear interrupt in Interrupt block
	XIntc_Acknowledge(&intc, XPAR_MICROBLAZE_RISCV_0_AXI_INTC_SYSTEM_BUTTON_L_INTR);
}

// Right
void IntrButton_R_Handler(void *CallbackRef){

#ifdef DEBUG_C
	print("Enter Button Right Interrupt Handler\r\n");
#endif
    ctrl_key = keys[KEY_RIGHT];
	// clear interrupt in Interrupt block
	XIntc_Acknowledge(&intc, XPAR_MICROBLAZE_RISCV_0_AXI_INTC_SYSTEM_BUTTON_R_INTR);
}

// button Down means drop
void IntrButton_D_Handler(void *CallbackRef){

#ifdef DEBUG_C
	print("Enter Button Down Interrupt Handler\r\n");
#endif
    ctrl_key = keys[KEY_DROP];
	// clear interrupt in Interrupt block
	XIntc_Acknowledge(&intc, XPAR_MICROBLAZE_RISCV_0_AXI_INTC_SYSTEM_BUTTON_D_INTR);
}

// button C means rotate
void IntrButton_C_Handler(void *CallbackRef){

#ifdef DEBUG_C
	print("Enter Button Center Interrupt Handler\r\n");
#endif
    ctrl_key = keys[KEY_ROTATE];
	// clear interrupt in Interrupt block
	XIntc_Acknowledge(&intc, XPAR_MICROBLAZE_RISCV_0_AXI_INTC_SYSTEM_BUTTON_C_INTR);
}

void IntrTimerHandler(void *CallbackRef){

	//  need to implement own functionality
#ifdef DEBUG_C
	print("Enter Timer Interrupt Handler\r\n");
#endif

	XTmrCtr *TmrCtrPtr = NULL;
	u8 TmrCtrNumber;
	u32 ControlStatusReg;

    // set the refresh flag
    refresh_flag = 1;

	/*
	 * Verify that each of the inputs are valid.
	 */
	Xil_AssertVoid(CallbackRef != NULL);

	/*
	 * Convert the non-typed pointer to an timer/counter instance pointer
	 * such that there is access to the timer/counter
	 */
	TmrCtrPtr = (XTmrCtr *) CallbackRef;

	/*
	 * Loop thru each timer counter in the device and call the callback
	 * function for each timer which has caused an interrupt
	 */
	for (TmrCtrNumber = 0; TmrCtrNumber < XTC_DEVICE_TIMER_COUNT; TmrCtrNumber++) {

		ControlStatusReg = XTmrCtr_ReadReg(TmrCtrPtr->BaseAddress,
				TmrCtrNumber,
				XTC_TCSR_OFFSET);
		/*
		 * Check if interrupt is enabled
		 */
		if (ControlStatusReg & XTC_CSR_ENABLE_INT_MASK) {

			/*
			 * Check if timer expired and interrupt occured
			 */
			if (ControlStatusReg & XTC_CSR_INT_OCCURED_MASK) {
				/*
				 * Increment statistics for the number of
				 * interrupts and call the callback to handle
				 * any application specific processing
				 */
				TmrCtrPtr->Stats.Interrupts++;
				TmrCtrPtr->Handler(TmrCtrPtr->CallBackRef,
						TmrCtrNumber);
				/*
				 * Read the new Control/Status Register content.
				 */
				ControlStatusReg =
						XTmrCtr_ReadReg(TmrCtrPtr->BaseAddress,
								TmrCtrNumber,
								XTC_TCSR_OFFSET);
				/*
				 * If in compare mode and a single shot rather
				 * than auto reload mode then disable the timer
				 * and reset it such so that the interrupt can
				 * be acknowledged, this should be only temporary
				 * till the hardware is fixed
				 */
				if (((ControlStatusReg &
						XTC_CSR_AUTO_RELOAD_MASK) == 0) &&
						((ControlStatusReg &
								XTC_CSR_CAPTURE_MODE_MASK) == 0)) {
					/*
					 * Disable the timer counter and
					 * reset it such that the timer
					 * counter is loaded with the
					 * reset value allowing the
					 * interrupt to be acknowledged
					 */
					ControlStatusReg &=
							(u32)~XTC_CSR_ENABLE_TMR_MASK;

					XTmrCtr_WriteReg(
							TmrCtrPtr->BaseAddress,
							TmrCtrNumber,
							XTC_TCSR_OFFSET,
							ControlStatusReg |
							XTC_CSR_LOAD_MASK);

					/*
					 * Clear the reset condition,
					 * the reset bit must be
					 * manually cleared by a 2nd write
					 * to the register
					 */
					XTmrCtr_WriteReg(
							TmrCtrPtr->BaseAddress,
							TmrCtrNumber,
							XTC_TCSR_OFFSET,
							ControlStatusReg);
				}

				/*
				 * Acknowledge the interrupt by clearing the
				 * interrupt bit in the timer control status
				 * register, this is done after calling the
				 * handler so the application could call
				 * IsExpired, the interrupt is cleared by
				 * writing a 1 to the interrupt bit of the
				 * register without changing any of the other
				 * bits
				 */
				XTmrCtr_WriteReg(TmrCtrPtr->BaseAddress,
						TmrCtrNumber,
						XTC_TCSR_OFFSET,
						ControlStatusReg |
						XTC_CSR_INT_OCCURED_MASK);
			}
		}
	}


}


int main() {
    int status;
    u32 DataRead;

    int c = 0, i, j, *ptr;
	int pos = B_COLS+B_COLS/2;  //  the center of second row, starting point
	int *backup;

    Xil_ICacheEnable();
    Xil_DCacheEnable();
    print("---Entering main---\n\r");

    // Initialize GPIO_out controller
    status = XGpio_Initialize(&Gpio_out, XPAR_GPIO_0_DEVICE_ID);
    XGpio_LookupConfig(XPAR_GPIO_0_DEVICE_ID);
    XGpio_SetDataDirection(&Gpio_out, 1, 0);

    // Initialize timer controller
    status = XTmrCtr_Initialize(&_axi_timer, XPAR_TMRCTR_0_DEVICE_ID);
    XTmrCtr_SetResetValue(&_axi_timer, 0, 0x6FFFFFF);
    XTmrCtr_SetOptions(&_axi_timer, 0, XTC_INT_MODE_OPTION | XTC_AUTO_RELOAD_OPTION | XTC_DOWN_COUNT_OPTION);

    // Initialize interrupt controller
    status = XIntc_Initialize(&intc, XPAR_INTC_0_DEVICE_ID);
    if (status == XST_SUCCESS) {
        print("Interrupt Block initialization succeed\r\n");
    } else {
        print("Interrupt Block initialization FAILED\r\n");
    }

    // Connect interrupt handlers for buttons
    status = XIntc_Connect(&intc, XPAR_MICROBLAZE_RISCV_0_AXI_INTC_SYSTEM_BUTTON_U_INTR, (XInterruptHandler)IntrButton_U_Handler, &Gpio_out);
    status = XIntc_Connect(&intc, XPAR_MICROBLAZE_RISCV_0_AXI_INTC_SYSTEM_BUTTON_L_INTR, (XInterruptHandler)IntrButton_L_Handler, &Gpio_out);
    status = XIntc_Connect(&intc, XPAR_MICROBLAZE_RISCV_0_AXI_INTC_SYSTEM_BUTTON_R_INTR, (XInterruptHandler)IntrButton_R_Handler, &Gpio_out);
    status = XIntc_Connect(&intc, XPAR_MICROBLAZE_RISCV_0_AXI_INTC_SYSTEM_BUTTON_D_INTR, (XInterruptHandler)IntrButton_D_Handler, &Gpio_out);
    status = XIntc_Connect(&intc, XPAR_MICROBLAZE_RISCV_0_AXI_INTC_SYSTEM_BUTTON_C_INTR, (XInterruptHandler)IntrButton_C_Handler, &Gpio_out);


    // Enable interrupts for buttons
    XIntc_Enable(&intc, XPAR_MICROBLAZE_RISCV_0_AXI_INTC_SYSTEM_BUTTON_U_INTR);
    XIntc_Enable(&intc, XPAR_MICROBLAZE_RISCV_0_AXI_INTC_SYSTEM_BUTTON_L_INTR);
    XIntc_Enable(&intc, XPAR_MICROBLAZE_RISCV_0_AXI_INTC_SYSTEM_BUTTON_R_INTR);
    XIntc_Enable(&intc, XPAR_MICROBLAZE_RISCV_0_AXI_INTC_SYSTEM_BUTTON_D_INTR);
    XIntc_Enable(&intc, XPAR_MICROBLAZE_RISCV_0_AXI_INTC_SYSTEM_BUTTON_C_INTR);


    // Connect interrupt handler for timer
    status = XIntc_Connect(&intc, XPAR_INTC_0_TMRCTR_0_VEC_ID, (XInterruptHandler)IntrTimerHandler, &_axi_timer);

#ifdef DEBUG_C
    if (status == XST_SUCCESS) {
        print("Connect Timer interrupt succeed\r\n");
    } else {
        print("Connect Timer interrupt FAILED\r\n");
    }
#endif

    // Enable interrupt vector in interrupt controller
    XIntc_Enable(&intc, XPAR_INTC_0_TMRCTR_0_VEC_ID);

    // Start interrupt controller
    XIntc_Start(&intc, XIN_REAL_MODE);

    // Initialize exception table and register interrupt controller handler
    Xil_ExceptionInit();
    Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_INT, (Xil_ExceptionHandler)XIntc_InterruptHandler, &intc);
    Xil_ExceptionEnable();

    // Start timer
    XTmrCtr_Start(&_axi_timer, 0);

    // Read timer counter
    XTmrCtr *temp = &_axi_timer;
    DataRead = XTmrCtr_ReadReg(temp->BaseAddress, 0, XTC_TCR_OFFSET);
#ifdef DEBUG_C
    xil_printf("\nTimer counter Read value= %d\n", DataRead);
#endif

     /* Initialize board, grey border, used to be white(7) */
	ptr = board;
	for (i = B_SIZE; i; i--){
        // i < 2*B_COLS+1 the bottom line of the table
        // i % B_COLS < 2 the left and right boarder of the table
        *ptr++ = i < 2*B_COLS+1 || i % B_COLS < 2 ? 60 : 0;
    }
	
    // generate a random seed according to time
    my_srand(DataRead);
    // get next shape
    shape = next_shape();

	while (running) {
        // refresh the board when the time interrupt happens
        if(refresh_flag) {
            if (c < 0) {
                if (fits_in(shape, pos + B_COLS)) {
                    pos += B_COLS;
                } else {
                    place(shape, pos, color);
                    ++points;
                    for (j = 0; j < B_SIZE-2*B_COLS; j = B_COLS * (j / B_COLS + 1)) {
                        for (; board[++j];) {
                            if (j % B_COLS == B_COLS-2) {
                                lines_cleared++;

                                // clear the line
                                for (; j % B_COLS; board[j--] = 0)
                                ;

                                // c = update();
                                // original update method has two functions
                                // 1st update the board[] array, this is moved to GPU
                                // 2nd is to get the control input, this is replaced with interrupt
                                c = ctrl_key; 

                                // move the upper row down after clear one line
                                for (; --j; board[j + B_COLS] = board[j])
                                ;

                                // c = update();
                                // original update method has two functions
                                // 1st update the board[] array, this is moved to GPU
                                // 2nd is to get the control input, this is replaced with interrupt
                                c = ctrl_key; 
                            }
                        }
                    }
                    shape = next_shape();
                    if (!fits_in(shape, pos = B_COLS+B_COLS/2)){
                        // c = keys[KEY_QUIT];
                        #ifdef DEBUG_C
                            print("Full! Stop!\n");
                        #endif
                    }
                    
                }
            }

            if (c == keys[KEY_LEFT]) {
                if (!fits_in(shape, --pos))
                    ++pos;
            }

            if (c == keys[KEY_ROTATE]) {
                backup = shape;
                shape = &shapes[5 * *shape];	/* Rotate */
                /* Check if it fits, if not restore shape from backup */
                if (!fits_in(shape, pos))
                    shape = backup;
            }

            if (c == keys[KEY_RIGHT]) {
                if (!fits_in(shape, ++pos))
                    --pos;
            }

            if (c == keys[KEY_DROP]) {
                for (; fits_in(shape, pos + B_COLS); ++points)
                    pos += B_COLS;
            }

            // pause and quit is handled by the interrupt handler already

            place(shape, pos, color);
            // c = update();
            // original update method has two functions
            // 1st update the board[] array, this is moved to GPU
            // 2nd is to get the control input, this is replaced with interrupt
            c = ctrl_key; 
            place(shape, pos, 0);

            // clear the flag, wait until next interrupt
            refresh_flag = 0; 
        }
	}

    print("---Exiting main---\n\r");
    Xil_DCacheDisable();
    Xil_ICacheDisable();
    return 0;
}

